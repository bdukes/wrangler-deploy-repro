trigger:
  branches:
    include:
      - main
  batch: false

pool:
  vmImage: ubuntu-latest
  name: Azure Pipelines

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: Build
        steps:
          - template: ./azure-pipelines/initial-build-steps.yml

          - pwsh: "Write-Host '##[command]pnpm run build'; pnpm run build"
            displayName: pnpm run build

          - publish: $(Build.SourcesDirectory)
            displayName: Publish output artifact
            artifact: output

  - stage: deploy_wrangler_repro
    displayName: Deploy to wrangler_repro
    dependsOn: Build
    variables:
      - group: wrangler_repro
    jobs:
      - job: Deploy
        workspace:
          clean: all
        steps:
          - download: current
            artifact: output
            displayName: Download output folder

          - template: ./azure-pipelines/initial-build-steps.yml
            parameters:
              workingDirectory: $(Pipeline.Workspace)/output/

          - pwsh: Write-Host '##[command]pnpm exec wrangler whoami'; pnpm exec wrangler whoami
            displayName: wrangler whoami
            workingDirectory: $(Pipeline.Workspace)/output/
            env:
              CLOUDFLARE_API_TOKEN: $(cloudflare-api-token)
              CLOUDFLARE_ACCOUNT_ID: $(cloudflare-account-id)
              WRANGLER_LOG_PATH: $(Pipeline.Workspace)/logs/wrangler

          - pwsh: Write-Host '##[command]pnpm exec wrangler deploy'; pnpm exec wrangler deploy
            displayName: wrangler deploy
            workingDirectory: $(Pipeline.Workspace)/output/
            env:
              CLOUDFLARE_API_TOKEN: $(cloudflare-api-token)
              CLOUDFLARE_ACCOUNT_ID: $(cloudflare-account-id)
              WRANGLER_LOG_PATH: $(Pipeline.Workspace)/logs/wrangler
            condition: >-
              and(
                succeeded(),
                ne(variables['Build.Reason'], 'PullRequest'),
                in(variables['Build.SourceBranchName'], 'main'))

          - pwsh: Write-Host '##[command]pnpm exec wrangler versions upload'; pnpm exec wrangler versions upload
            displayName: wrangler versions upload
            workingDirectory: $(Pipeline.Workspace)/output/
            env:
              CLOUDFLARE_API_TOKEN: $(cloudflare-api-token)
              CLOUDFLARE_ACCOUNT_ID: $(cloudflare-account-id)
              WRANGLER_LOG_PATH: $(Pipeline.Workspace)/logs/wrangler
            condition: >-
              and(
                succeeded(),
                eq(variables['Build.Reason'], 'PullRequest'),
                ne(variables['System.PullRequest.PullRequestId'], 'Null'))

          - publish: $(Pipeline.Workspace)/logs
            displayName: Publish logs artifact
            artifact: logs
            condition: always()
